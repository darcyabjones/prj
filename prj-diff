#!/usr/bin/env bash

# vi: ft=bash
set -euo pipefail

CMD=$(prj-private-cli.py "$(basename $0)" "$@" <<EOF
short="-b", long="--base", dest="BASE", type="str", default="", help="Which base directory to use"
long="--all", dest="ALL", type="FLAG", default=False, help="Ignore the .prjignore"
long="--cpus", dest="CPUS", type=int, default=2, help="What's the maximum number of CPUs we can use? Use -1 for all."
dest="BACKUP", type="str", help="Which backup to compare to. Use HEAD to compare with latest. Use ALL to show all tracked files in the project."
dest="TARGET", type=str, nargs="*", help="Only check these files"
EOF
)

if ! (echo "${CMD}" | grep '^### prj-private-cli output$' > /dev/null)
then
    # help or an error occurred
    echo "# $(basename $0)"
    echo "${CMD}"
    exit 0
fi

eval "${CMD}"

EC=0
if [ -z "${BASE:-}" ]
then
    BASE=$(prj-private-findbase.sh "${PWD}" 2> /dev/null) || EC="$?"
else
    BASE=$(prj-private-findbase.sh "${BASE}" True 2> /dev/null) || EC="$?"
fi

if [ "${EC}" -eq 2 ] && [ "${BACKUP:-}" != "HEAD" ]
then
    BKPDIR="${BASE}"
elif [ "${EC}" -eq 0 ] && [ ! -z "${BASE:-}" ]
then
    source "${BASE}/.prj"
    BKPDIR="${BASE}/${BACKUP_DIR}"

    if [ -z "${BACKUP:-}" ] || [ "${BACKUP:-}" == "HEAD" ]
    then
        BACKUP="${HEAD}"
    fi
elif [ "${EC}" -ne 0 ]
then
    exit "${EC}"
else
    echo "ERROR: this shouldn't happen" >&2
    exit 1
fi

if [ "${BACKUP}" == "HEAD" ]
then
    echo "ERROR: Could not find a backup corresponding to HEAD" >&2
    echo "ERROR: This could happen if you're outside a bkp project or you don't have any previous backups." >&2
    echo "ERROR: Try providing the actual path to the sha256 sums" >&2
    exit 1
fi

if [ -e "${BACKUP}" ]
then
    BACKUP_SHA="${BACKUP}"
elif [ -e "${BKPDIR}/${BACKUP}.sha256" ]
then
    BACKUP_SHA="${BKPDIR}/${BACKUP}.sha256"
elif [ "${BACKUP}" == "ALL" ]
then
    BACKUP_SHA=""
else
    echo "ERROR: could not find a backup corresponding to '${BACKUP}'" >&2
    echo "ERROR: Try providing the actual path to the sha256 sums or use ALL to show all tracked files in project." >&2
    exit 1
fi

if [ "${BACKUP}" == "ALL" ]
then
    BACKUP_SHA=""
elif [ ! -f "${BACKUP_SHA:-}" ]
then
    echo "ERROR: File '${BACKUP_SHA}' does not exist" >&2
    exit 1
elif [ "${#TARGET[@]}" -gt 0 ]
then
    BACKUP_SHA=$(
        cat "${BACKUP_SHA}" \
        | grep \
          --line-regex \
          -f <(printf '[^[:space:]][^[:space:]]*[[:space:]][[:space:]]*%s\n' "${TARGET[@]}")
    )
else
    BACKUP_SHA=$(cat "${BACKUP_SHA}")
fi

cd "${BASE}"

[ "${ALL}" == "True" ] && ALL_FLAG="--all" || ALL_FLAG=""

CHK=$(prj-sha ${ALL_FLAG} --cpus "${CPUS}" --base "${BASE}" "${TARGET[@]}")

difference() {
    grep --invert-match --fixed-strings --line-regexp --file $2 $1 || :
}

intersection() {
    grep --fixed-strings --line-regexp --file $2 $1 || :
}

BKPDIFF="$((diff <(echo "${BACKUP_SHA}" | sort) <(echo "${CHK}" | sort) || :) | prj-private-diff.sh)"
echo "${BKPDIFF}" | (grep -v '^[[:space:]]*$' || :)
