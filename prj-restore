#!/usr/bin/env bash

set -euo pipefail

CMD=$(prj-private-cli.py "$(basename $0)" "$@" <<EOF
short="-b", long="--base", dest="BASE_", type="str", default="", help="Which base directory to use"
short="-m", long="--message", dest="MESSAGE", type="str", default="", help="The message to save"
short="-d", long="--delete", dest="DELETE", type="FLAG", default=False, help="Delete files as well as overwriting them. Disabled if TARGET provided."
long="--notefile", dest="NOTEFILE_", type="str", default="", help="Where to cache notes to be saved later."
short="-y", long="--yes", dest="YES", type="FLAG", default=False, help="Don't confirm overwrites."
long="--cpus", dest="CPUS", type=int, default=2, help="What's the maximum number of CPUs we can use? Use -1 for all."
long="--tmp", dest="THISTMPDIR", type=str, default="", help="Where to store intermediate files. Default from TMPDIR or working directory."
dest="BACKUP", type="str", help="The backup to restore files from. Use HEAD to restore from latest save."
dest="TARGET", type=str, nargs="*", help="Only save these files"
EOF
)

if ! (echo "${CMD}" | grep '^### prj-private-cli output$' > /dev/null)
then
    # help or an error occurred
    echo "# $(basename $0)"
    echo "${CMD}"
    exit 0
fi

eval "${CMD}"

if [ ! -z "${THISTMPDIR:-}" ]
then
    TMPDIR="${THISTMPDIR}"
elif [ -z "${TMPDIR:-}" ]
then
    TMPDIR="${PWD}"
fi

EC=0
if [ -z "${BASE_:-}" ]
then
    BASE="$(prj-private-findbase.sh "${PWD}" 2> /dev/null)" || EC="$?"
else
    BASE="$(prj-private-findbase.sh "${BASE_}" True 2> /dev/null)" || EC="$?"
fi

if [ "${EC}" -eq 2 ] && [ ! -z "${BASE_}"]
then
    BKPDIR="${BASE}"
elif [ "${EC}" -eq 0 ] && [ ! -z "${BASE:-}" ]
then
    source "${BASE}/.prj"
    BKPDIR="${BASE}/${BACKUP_DIR}"

    if [ -z "${BACKUP:-}" ] || [ "${BACKUP:-}" == "HEAD" ]
    then
        BACKUP="${HEAD}"
    fi
elif [ "${EC}" -eq 2 ] && [ -z "${BASE_:-}" ]
then
    echo "WARNING: Couldn't find any 'prj' projects." >&2
    echo "WARNING: If you use restore outside of a 'prj' product, you should specify the backup directory with --base." >&2
    echo "WARNING: Will attempt to use current working directory as BASE dir." >&2
    BKPDIR="${BASE}"
elif [ "${EC}" -ne 0 ]
then
    exit "${EC}"
else
    echo "ERROR: this shouldn't happen" >&2
    exit 1
fi

if [ "${BACKUP}" == "HEAD" ]
then
    echo "ERROR: Could not find a backup corresponding to HEAD" >&2
    echo "ERROR: This could happen if you're outside a bkp project or you don't have any previous backups." >&2
    echo "ERROR: Try providing the actual path to the sha256 sums" >&2
    exit 1
fi


if [ -e "${BACKUP}" ]
then
    BACKUP_SHA="${BACKUP}"
elif [ -e "${BKPDIR}/${BACKUP}.sha256" ]
then
    BACKUP_SHA="${BKPDIR}/${BACKUP}.sha256"
else
    echo "ERROR: could not find a backup corresponding to '${BACKUP}'" >&2
    exit 1
fi

cd "${BASE}"

DATE=$(date '+%Y%m%d-%H%M%S')
NOTEFILE="${BASE}/${NOTEFILE_:-${NOTEFILE:-NOTES.txt}}"


# Deals with case of empty strings
if [ "${#TARGET[@]}" -gt 0 ]
then
    readarray -t TARGET < <(prj-private-relpaths.sh "${BASE}" "${TARGET[@]}")
fi

if [ "${#TARGET[@]}" -gt 0 ]
then
    DELETE="False"
fi

CHK=$(prj-sha --cpus "${CPUS}" --base "${BASE}" "${TARGET[@]}")
BKPDIFF=$(
    (diff <(sort "${BACKUP_SHA}") <(echo "${CHK}" | sort) || :) \
        | prj-private-diff.sh \
        | (grep -v '^[[:space:]]*$' || :)
)
readarray -t BKPFILES < <(echo "${BKPDIFF}" | awk '$1 != "NEW"' | cut -f 2)
BKPFILES=$(prj-find --base "${BASE}" "${BACKUP}" "${BKPFILES[@]}")

BKPDIFF=$(
    join -t'	' -a 1 --check-order -1 2 -2 3 -e "MISSING" -o $'1.1\t1.2\t2.1\t2.2\t2.4' \
        <(echo "${BKPDIFF}" | sort -u -k 2b,2) \
        <(echo "${BKPFILES}" | sort -u -k 3b,3)
)

BKPDIFF=$(
    join -t'	' -a 1 --check-order -1 2 -2 2 -e "MISSING" -o $'1.1\t1.2\t2.1\t1.3\t1.4\t1.5' \
        <(echo "${BKPDIFF}" | sort -u -k 2b,2) \
        <(echo "${CHK}" | sed 's/[[:space:]][[:space:]]*/\t/' | sort -u -k 2b,2)
)
# status filename currentchecksum tarfile bkpchecksum compression

unset BKPFILES

cleanup() {
    EC="$?"
    FN="$1"
    TMPNAME="$2"
    if [ "${EC}" -ne 0 ] && [ -f "${TMPNAME}" ]
    then
        echo -e "\nERROR: While extracting ${FN}, original retained" >> "${NOTEFILE}"
    fi

    rm -f "${TMPNAME}"
    exit "${EC}"
}

ask() {
    FN="$1"
    TAR="$2"
    while true
    do
        printf "Replace '${FN}' with the copy from '${TAR}'? [yn] "
        read RESPONSE
        case "${RESPONSE}" in
            [Yy]*) return 0; break;;
            [Nn]*) return 1; break;;
            *) echo "Please select [y]es or [n]o." ;;
        esac
    done
}

echo -e "\n## Restoring files from ${BACKUP} on ${DATE}" | tee --append "${NOTEFILE}"

NEWMOD_FILES=$(echo "${BKPDIFF}" \
    | awk 'BEGIN {OFS="\t"} $1 == "MODIFIED" {print} $1 == "DELETED" {$1="NEW"; print}' \
    | (grep -v '^[[:space:]]*$' || :))
DELETE_FILES=$(echo "${BKPDIFF}" \
    | awk 'BEGIN {OFS="\t"} $1 == "NEW" {$1="DELETE"; print $1, $2, $3}' \
    | (grep -v '^[[:space:]]*$' || :))

if [ ! -z "${NEWMOD_FILES}" ]
then
    echo -e "\nExtracting files:" | tee --append "${NOTEFILE}"
fi

# -u 3 is needed here to allow user input from stdin in ask
while read -u 3 LINE
do
    if [ -z "${LINE}" ]
    then
        continue
    fi

    # status filename currentchecksum tarfile bkpchecksum compression
    STATUS=$(echo "${LINE}" | cut -d'	' -f 1)
    FN=$(echo "${LINE}" | cut -d'	' -f 2)
    SHA=$(echo "${LINE}" | cut -d'	' -f 3)
    TAR=$(echo "${LINE}" | cut -d'	' -f 4)
    BKPSHA=$(echo "${LINE}" | cut -d'	' -f 5)
    COMP=$(echo "${LINE}" | cut -d'	' -f 6)

    TARNAME="${BKPDIR}/${TAR}"

    TMPFILE="${TMPDIR}/tmp-$(basename "${FN}")"
    trap "cleanup '${FN}' '${TMPFILE}'" ERR

    # We only ask permission if the file exists.
    if [ "${YES}" == "False" ] && [ -f "${FN}" ]
    then
        ask "${FN}" "${TARNAME}" || continue
    fi

    if [ "${COMP}" == "uncompressed" ]
    then
        tar --extract --to-stdout --file="${TARNAME}" "${BKPSHA}" > "${TMPFILE}"
    else
        COMPTOOL=$(prj-private-getcomptool.sh decompress "${COMP}" 1 "${CPUS}")
        tar --extract --to-stdout --file="${TARNAME}" "${BKPSHA}.${COMP}" \
            | ${COMPTOOL} \
            > "${TMPFILE}"
    fi

    NEWSHA=$(sha256sum "${TMPFILE}" | cut -d' ' -f 1)

    if [ "${BKPSHA}" != "${NEWSHA}" ]
    then
        echo "ERROR: the extracted file '${FN}' from '${TARNAME}' doesn't match the expected checksum!" >&2
        exit 1
    else
        mkdir -p "$(dirname "${FN}")"
        mv "${TMPFILE}" "${FN}"
        rm -f "${TMPFILE}"
    fi

    [ -z "${SHA}" ] && EXTRABIT="" || EXTRABIT="${SHA} > "
    echo "- ${STATUS}: ${FN} (sha: ${EXTRABIT}${BKPSHA})" >> "${NOTEFILE}"
done 3<<< "${NEWMOD_FILES}"
# status filename currentchecksum tarfile bkpchecksum compressionext

ask_delete() {
    FILES="$1"
    echo -e "\nYou specified --delete so we're removing files not in ${BACKUP}."
    echo -e "This will remove the following files:"
    echo "${FILES}" | awk '{printf("- %s (sha:%s)\n", $2, $3)}'
    while true
    do
        echo
        read -p "Do you want to continue? [yn], use i to select individually. " RESPONSE
        case "${RESPONSE}" in
            [Yy]*) return 0; break;;
            [Nn]*) return 1; break;;
            [Ii]*) return 2; break;;
            *) echo "Please select [y]es or [n]o or i." ;;
        esac
    done
}

ask_indiv() {
    LINE="$1"
    while true
    do
        FN=$(echo "${LINE}" | cut -f 2)
        SHA=$(echo "${LINE}" | cut -f 3)
        read -p "Remove file '${FN}' (sha: ${SHA})? [yn] " RESPONSE
        case "${RESPONSE}" in
            [Yy]*) return 0; break;;
            [Nn]*) return 1; break;;
            *) echo "Please select [y]es or [n]o." ;;
        esac
    done
}

if [ "${DELETE}" == "True" ]
then

    if [ ! -z "${DELETE_FILES}" ]
    then
        echo -e "\nDeleting files not present in ${BACKUP}:" >> "${NOTEFILE}"
    fi

    if [ "${YES}" == "False" ] && [ ! -z "${DELETE_FILES}" ]
    then
        ASK_CODE=0
        ask_delete "${DELETE_FILES}" || ASK_CODE=$?

        case "${ASK_CODE}" in
            0)
                echo "${DELETE_FILES}" \
                    | cut -f 2 \
                    | xargs -I {} sh -c 'rm -f {} && echo "- DELETED: {}"' \
                    | tee --append "${NOTEFILE}"
                ;;
            1) : ;;
            2)
                while read -u 4 LINE
                do
                    if ask_indiv "${LINE}"
                    then
                        FN=$(echo "${LINE}" | cut -f 2)
                        rm -f "${FN}"
                        echo "- DELETED: ${FN}" >> "${NOTEFILE}"
                    fi
                done 4<<< "${DELETE_FILES}"
            ;;
        esac
    elif [ ! -z "${TODELETE}" ]
    then
        echo "${TODELETE}" \
            | cut -f 2 \
            | xargs -I {} sh -c 'rm -f {} && echo "- DELETED: {}"' \
            | tee --append "${NOTEFILE}"
    else
        echo "NOTE: Didn't find any files to be deleted"
    fi
fi


echo -e "\nCompleted without error!" | tee --append "${NOTEFILE}"
