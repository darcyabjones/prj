#!/usr/bin/env bash
# vi: ft=bash
set -euo pipefail

CMD=$(prj-private-cli.py "$(basename $0)" "$@" <<EOF
short="-b", long="--base", dest="BASE", type="str", default=".", help="Which base directory to use"
dest="BACKUP", type="str", help="The backup to look for files in"
dest="TARGET", type=str, nargs="*", help="Only look for the locations of these files, not the whole snapshot"
EOF
)

if ! (echo "${CMD}" | grep '^### prj-private-cli output$' > /dev/null)
then
    # help or an error occurred
    echo "# $(basename $0)"
    echo "${CMD}"
    exit 0
fi

eval "${CMD}"

BASE="$(prj-private-findbase.sh ${BASE})"

source "${BASE}/.prj"
if [ "${BACKUP:-}" == "HEAD" ]
then
    BACKUP="${HEAD}"
fi

if [ -f "${BACKUP}" ]
then
    PREV_SHA="${BACKUP%.tar.gz}.sha256"
else
    BACKUP=$(basename "${BACKUP%.tar.gz}")
    PREV_SHA="${BASE}/${BKPDIR}/${BACKUP}.sha256"
    BACKUP="${BASE}/${BKPDIR}/${BACKUP}.tar.gz"
fi

if [ -z "${BACKUP:-}" ] || [ ! -f "${BACKUP:-}" ]
then
    echo "ERROR: The backup file ${BACKUP} does not exist." >&2
    exit 1
fi

if [ -z "${PREV_SHA:-}" ] || [ ! -f "${PREV_SHA:-}" ]
then
    echo "ERROR: Could not find sha file for the backup file ${BACKUP}." >&2
    exit 1
fi

TARGET_SHAS=$(sed 's/[[:space:]][[:space:]]*/\t/' "${PREV_SHA}" | awk -F'\t' 'BEGIN {OFS="\t"} {print $2, $1}')

# Deals with case of empty strings
if [ "${#TARGET[@]}" -gt 0 ]
then
    readarray -t TARGET < <(prj-private-relpaths.sh "${BASE}" "${TARGET[@]}")
fi

if [ "${#TARGET[@]}" -gt 0 ]
then
    TARGET_SHAS=$(echo "${TARGET_SHAS}" | grep -f <(printf '^%s[[:space:]][A-Za-z0-9][A-Za-z0-9]*$\n' "${TARGET[@]}"))
fi


BACKUPS=$(ls "${BASE}/${BKPDIR}/"*.tar.gz | awk -v BKP="${BACKUP}" '$0 <= BKP' | sort -r | tr '\0' 'X')

echo "${TARGET_SHAS}" | while read LINE
do
    TARGET_FILE=$(echo "${LINE}" | cut -d'	' -f 1)
    TARGET_SHA=$(echo "${LINE}" | cut -d'	' -f 2)

    export GOTIT=
    while read BKP
    do
        TARFILE_LINE=$(prj-tarlist --base "${BASE}" "${BKP}" "${TARGET_FILE}") || :

        if [ ! -z "${TARFILE_LINE}" ]
        then
            TARFILE_BKP=$(echo "${TARFILE_LINE}" | cut -d'	' -f 1)
            TARFILE_SHA=$(echo "${TARFILE_LINE}" | cut -d'	' -f 3)
            if [[ "${TARFILE_SHA}" == "${TARGET_SHA}" ]]
            then
                export GOTIT="${TARFILE_BKP}"
                break
            fi
        fi
    done <<< "${BACKUPS}"
    # Using heredoc style needed to avoid subshell, causing GOTIT to remain unset

    if [ -z "${GOTIT}" ]
    then
        echo "WARNING: could not find file corresponding to ${TARGET_FILE} with ${TARGET_SHA}" >&2
    else
        echo -e "${GOTIT}\t${TARGET_FILE}\t${TARGET_SHA}"
    fi
done
