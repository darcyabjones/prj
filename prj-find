#!/usr/bin/env bash
# vi: ft=bash
set -euo pipefail

CMD=$(prj-private-cli.py "$(basename $0)" "$@" <<EOF
short="-b", long="--base", dest="BASE", type="str", default="", help="Which base directory to use"
dest="BACKUP", type="str", help="The backup to look for files in. Use HEAD to compare with latest. Use ALL to show all locations of all backup files."
dest="TARGET", type=str, nargs="*", help="Only look for the locations of these files, not the whole snapshot"
EOF
)

if ! (echo "${CMD}" | grep '^### prj-private-cli output$' > /dev/null)
then
    # help or an error occurred
    echo "# $(basename $0)"
    echo "${CMD}"
    exit 0
fi

eval "${CMD}"

BACKUP=$(echo "${BACKUP}" | (grep -v '^[[:space:]]*$' || :))
if [ -z "${BACKUP}" ]
then
    echo "ERROR: BACKUP was an empty string. We need a value here." >2
    exit 1
fi

EC=0
if [ -z "${BASE:-}" ]
then
    BASE=$(prj-private-findbase.sh "${PWD}" 2> /dev/null) || EC="$?"
else
    BASE=$(prj-private-findbase.sh "${BASE}" True 2> /dev/null) || EC="$?"
fi

if [ "${EC}" -eq 2 ] && [ "${BACKUP:-}" != "HEAD" ]
then
    BKPDIR="${BASE}"
elif [ "${EC}" -eq 0 ] && [ ! -z "${BASE:-}" ]
then
    source "${BASE}/.prj"
    BKPDIR="${BASE}/${BACKUP_DIR}"

    if [ -z "${BACKUP:-}" ] || [ "${BACKUP:-}" == "HEAD" ]
    then
        BACKUP="${HEAD}"
    fi
elif [ "${EC}" -ne 0 ]
then
    exit "${EC}"
else
    echo "ERROR: this shouldn't happen" >&2
    exit 1
fi

if [ "${BACKUP}" == "HEAD" ]
then
    echo "ERROR: Could not find a backup corresponding to head" >&2
    echo "ERROR: This could happen if you're outside a bkp project or you don't have any previous backups." >&2
    echo "ERROR: Try providing the actual path to the sha256 sums" >&2
    exit 1
fi

if [ -e "${BACKUP}" ]
then
    SHAS=( "${BACKUP}" )
elif [ -e "${BKPDIR}/${BACKUP}.sha256" ]
then
    SHAS=( "${BKPDIR}/${BACKUP}.sha256" )
elif [ "${BACKUP}" == "ALL" ]
then
    S=$(find "${BKPDIR}" -name "*.sha256" )
    if [ -z "${S}" ]
    then
        echo "ERROR: You specified 'ALL', but we couldn't find any .sha256 files in your backup directory." >&2
        echo "ERROR: Make sure that you are in a prj project or --base is specified correctly" >&2
        exit 1
    fi

    readarray -t SHAS < <(echo "${S}")
else
    echo "ERROR: This shouldn't happen, contact the authors." >&2
    exit 1
fi

for SHA in "${SHAS[@]}"
do
    if [ -z "${SHA:-}" ] || [ ! -e "${SHA:-}" ]
    then
        echo "ERROR: The backup file ${SHA:-${BACKUP}} does not exist." >&2
        exit 1
    fi
done

TARGET_SHAS=$(cat "${SHAS[@]}" | sed 's/[[:space:]][[:space:]]*/\t/' | sort -u)

# Deals with case of empty strings
if [ "${#TARGET[@]}" -gt 0 ]
then
    readarray -t TARGET < <(prj-private-relpaths.sh "${BASE}" "${TARGET[@]}")
fi

# CD after getting new target paths to allow relative paths in command
cd "${BASE}"

if [ "${#TARGET[@]}" -gt 0 ]
then
    TARGET_SHAS=$(echo "${TARGET_SHAS}" \
        | (grep -v '^[[:space:]]*$' || :) \
        | (grep -f <(printf '^[A-Za-z0-9][A-Za-z0-9]*[[:space:]]%s$\n' "${TARGET[@]}") || :))
fi

TARFILES=$(find "${BKPDIR}" -name "*.tar")

if [ -z "${TARFILES}" ]
then
    echo "${TARGET_SHAS}" | sed 's/^/MISSING\t/ ; s/$/\tNA/'
    exit 0
fi

MANIFESTS=( )
while read -u 3 TARFILE
do
    MANIFEST="${TARFILE%%.tar}.MANIFEST"
    if [ ! -s "${MANIFEST}" ]
    then
        prj-remanifest "${TARFILE}"
    fi
    MANIFESTS+=( "${MANIFEST}" )
done 3<<< "${TARFILES}"

INNERFILES=$(cat "${MANIFESTS[@]}" | awk -F "\t" 'BEGIN {OFS="\t"} {print $2, $3, $1}')
JOINED=$(
    join -t'	' --check-order -a 2 -j 1 -e "MISSING" -o '1.3	2.1	2.2	1.2' \
      <(echo -e "${INNERFILES}" | sort -u -k 1b,1) \
      <(echo -e "${TARGET_SHAS}" | sort -u -k 1b,1) \
    | awk -F"\t" 'BEGIN {OFS="\t"} $4 == "MISSING" {$4 = "NA"; print} {print}' \
    | (grep -v '^[[:space:]]*$' || :) \
    | sort -u
)

echo -e "${JOINED}"
